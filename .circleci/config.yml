version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.1.0
  aws-cli: circleci/aws-cli@0.1.13
  kube-orb: circleci/kubernetes@0.3.0
dependencies:
  cache_directories:
    - "./node_modules"
jobs:
  build:
    docker:
      - image: node:latest
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Build Application
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - ./scripts/
            - ./.deployment/
            - ./dist/
            - ./node_modules/
            - ./package.json
            - ./Dockerfile
  dockerization:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Build Image
          command: docker build -t $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$CIRCLE_SHA1 .
      - run:
          name: Docker Login
          command: echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY_URL -u $DOCKER_USERNAME --password-stdin
      - run:
          name: Push Image
          command: docker push $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$CIRCLE_SHA1
      - run: sed -i "s|{{DOCKER_REGISTRY_URL}}|$DOCKER_REGISTRY_URL|" .deployment/deployment.yml
      - persist_to_workspace:
          root: .
          paths:
            - ./.deployment/
            - ./scripts/
            - ./node_modules/
            - ./package.json
  secrets:
    docker:
      - image: node:latest
    environment:
      APP_NAME: zephyr
    steps:
      - attach_workspace:
          at: .
      - run: node scripts/get-secrets.js -s $APP_NAME/$CIRCLE_BRANCH -f .deployment/secret.yml
      - persist_to_workspace:
          root: .
          paths:
            - ./.deployment/
  deploy:
    docker:
      - image: alpine
    environment:
      APP_NAME: zephyr
      AWS_REGION: us-west-2
      APP_HOSTNAME: api.zephyrgaming.gg
    steps:
      - run: apk add ca-certificates
      - run: apk add curl
      - attach_workspace:
          at: .
      - run: sed -i "s|{{APP_NAME}}|$APP_NAME|" .deployment/deployment.yml
      - run: sed -i "s|{{AWS_REGION}}|$AWS_REGION|" .deployment/deployment.yml
      - run: sed -i "s|{{DOCKER_IMAGE_NAME}}|$DOCKER_IMAGE_NAME|" .deployment/deployment.yml
      - run: sed -i "s|{{APP_HOSTNAME}}|$APP_HOSTNAME|" .deployment/deployment.yml
      - run: sed -i "s|{{APP_ADMIN_HOSTNAME}}|$APP_ADMIN_HOSTNAME|" .deployment/deployment.yml
      - run: sed -i "s|{{CIRCLE_SHA1}}|$CIRCLE_SHA1|" .deployment/deployment.yml
      - run: sed -i "s|{{CIRCLE_BUILD_NUM}}|$CIRCLE_BUILD_NUM|" .deployment/deployment.yml
      - run: sed -i "s|{{CIRCLE_BRANCH}}|$CIRCLE_BRANCH|" .deployment/deployment.yml
      - run: cat .deployment/deployment.yml
      - run: curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      - run: chmod +x ./kubectl
      - run: mv ./kubectl /usr/local/bin/kubectl
      - run: echo $KUBE_TOKEN > ./kube_token
      - run: echo $KUBE_CA | base64 -d > ./kube_ca
      - run: kubectl config set-cluster $KUBE_CLUSTER_NAME --server=$KUBE_CLUSTER_ADDRESS --certificate-authority="$(pwd)/kube_ca"
      - run: kubectl config set-credentials circleci --token="$(cat ./kube_token)"
      - run: kubectl config set-context k8s --cluster=$KUBE_CLUSTER_NAME --user=circleci
      - run: kubectl config use-context k8s
      - run: kubectl apply -f .deployment/secret.yml --namespace $KUBE_NAMESPACE --context k8s --insecure-skip-tls-verify=true
      - run: kubectl apply -f .deployment/deployment.yml --namespace $KUBE_NAMESPACE --context k8s --insecure-skip-tls-verify=true
workflows:
  version: 2
  deploy:
    jobs:
      - build
      - dockerization:
          context: registry.dak.dev
          requires:
            - build
      - secrets:
          context: aws.dak
          requires:
            - dockerization
          filters:
            branches:
              only:
                - master
      - deploy:
          context: k8s.theweb.team
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  # only branches matching the below regex filters will run
                - master
          requires:
            - secrets